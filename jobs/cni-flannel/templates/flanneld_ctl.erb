#!/bin/bash -eu

<% unless p("cf_networking.disable") %>
source /var/vcap/packages/ctl-utils/ctl_util.sh

RUN_DIR=/var/vcap/sys/run/flannel
LOG_DIR=/var/vcap/sys/log/flannel
ETCD_CERTS_DIR=/var/vcap/jobs/cni-flannel/config/certs/etcd
export PIDFILE=${RUN_DIR}/flanneld.pid

ETCD_ENDPOINT=<%= p("cf_networking.plugin.etcd_endpoints").map{|addr| "\"https://#{addr}:4001\""}.join(",") %>

<%
  require 'json'

  def subnet_prefix_length
    size = p("cf_networking.subnet_prefix_length")
    if size < 1 || size > 30
      raise "'cf_networking.subnet_prefix_length' must be a value between 1-30"
    end
    size
  end

  toRender = {
    "Network" => p("cf_networking.network"),
    "SubnetLen" => subnet_prefix_length,
    "Backend" => {
      "Type" => "vxlan",
      "Port" => 8472,
      "VNI" => 1,
      "GBP" => true
    },
  }

  flannelConfig = JSON.pretty_generate(toRender)
%>

mkdir -p /var/vcap/sys/log/monit
exec 1>> /var/vcap/sys/log/monit/flanneld.out.log
exec 2>> /var/vcap/sys/log/monit/flanneld.err.log

case $1 in

  start)
    mkdir -p ${RUN_DIR}
    mkdir -p ${LOG_DIR}

    keyURL=${ETCD_ENDPOINT}/v2/keys/coreos.com/network/config

    curl -v \
      --cacert ${ETCD_CERTS_DIR}/ca.crt \
      --cert ${ETCD_CERTS_DIR}/client.crt \
      --key ${ETCD_CERTS_DIR}/client.key \
      $keyURL \
      -XPUT -d value='<%= flannelConfig %>' \
      1>>${LOG_DIR}/flanneld.stdout.log \
      2>>${LOG_DIR}/flanneld.stderr.log

    exec 2> >(tee -a $LOG_DIR/flanneld.stderr.log | logger -p user.error -t flanneld) \
         1> >(tee -a $LOG_DIR/flanneld.stdout.log | logger -t flanneld)

         echo $$ > ${PIDFILE}

    exec /var/vcap/packages/flannel/bin/flanneld \
      --log_dir=${LOG_DIR} \
      --subnet-file="/var/vcap/data/flannel/subnet.env" \
      --subnet-lease-renew-margin=1439 \
      --etcd-cafile=${ETCD_CERTS_DIR}/ca.crt \
      --etcd-certfile=${ETCD_CERTS_DIR}/client.crt \
      --etcd-keyfile=${ETCD_CERTS_DIR}/client.key \
      --etcd-endpoints=${ETCD_ENDPOINT} \
      --health-check-port=<%= p("cf_networking.plugin.health_check_port") %>
    ;;

  stop)
    stop_process
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    ;;

esac
<% end %>
