#!/bin/bash -eu

<% unless p("cf_networking.disable") %>
RUN_DIR=/var/vcap/sys/run/vxlan-policy-agent
LOG_DIR=/var/vcap/sys/log/vxlan-policy-agent
PIDFILE=$RUN_DIR/vxlan-policy-agent.pid

mkdir -p /var/vcap/sys/log/monit
exec 1>> /var/vcap/sys/log/monit/vxlan-policy-agent.out.log
exec 2>> /var/vcap/sys/log/monit/vxlan-policy-agent.err.log

function wait_for_server_to_become_healthy() {
  for i in $(seq 20); do
    set +e
    curl 127.0.0.1:<%= p("cf_networking.vxlan_policy_agent.debug_server_port")%>/log-level
    if [ "0" == "$?" ]; then
      healthy=true
      return
    fi
    set -e
    sleep 1
  done
}

function handle_orphaned_server() {
  echo "killing vxlan-policy-agent with pid ${pid}"
  kill "${pid}"
}

function wait_pid() {
  pid=$1
  shift
  max_checks=$1
  shift

  checks=$max_checks
  while [ -e "/proc/$pid" ]; do
    checks=$((checks - 1))
    if [ $checks -le 0 ]; then
      return 1
    fi
    sleep 0.1
  done

  return 0
}

function stop_process() {
  local pid
  pid=$(cat "$PIDFILE")

  echo "stopping..."
  kill -TERM "$pid"
  if wait_pid "$pid" 100 ; then
    rm "$PIDFILE"
    return 0
  fi

  echo "unable to stop process using SIGTERM after 10 seconds, will now attempt to SIGQUIT"
  kill -QUIT "$pid" || true
  if wait_pid "$pid" 50 ; then
    rm "$PIDFILE"
    return 0
  fi

  echo "unable to stop process using SIGQUIT after 5 seconds, will now attempt to SIGKILL"
  kill -KILL "$pid" || true
  if wait_pid "$pid" 50 ; then
    rm "$PIDFILE"
    return 0
  fi

  echo "unable to stop process using SIGKILL after 5 seconds"
  return 1
}

case $1 in

  start)
    trap handle_orphaned_server TERM

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    /var/vcap/packages/vxlan-policy-agent/bin/vxlan-policy-agent \
         -config-file=/var/vcap/jobs/vxlan-policy-agent/config/vxlan-policy-agent.json
    2> >(tee -a $LOG_DIR/vxlan-policy-agent.stderr.log | logger -p user.error -t vxlan-policy-agent) \
    1> >(tee -a $LOG_DIR/vxlan-policy-agent.stdout.log | logger -t vxlan-policy-agent) &

    pid=$!

    healthy=false
    wait_for_server_to_become_healthy

    if ${healthy}; then
      echo ${pid} > ${PIDFILE}
    else
      kill -9 ${pid}
      exit 1
    fi
    ;;

  stop)

    stop_process

    ;;

  *)
    echo "Usage: $0 {start|stop}"

    ;;

esac
<% end %>
